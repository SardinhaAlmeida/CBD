// NMEC: 108796

#1 Encontre todos os atores que dirigiram um filme em que também atuaram e apresente o nome do ator e o título do filme.
MATCH(actor:Persom)-[:ACTED_IN]->(movie:Movie)<-[:DIRECTED]-(actor:Person)
    RETURN actor.name as actors_directors, movie.title as movie_title

# 2. Para cada filme realizado depois de 2005, apresente os nomes de todos os atores que atuaram nesse filme.
MATCH(actor:Person)-[:ACTED_IN]->(movie:Movie)
    WHERE movie.released > 2005
    RETURN movie.title as movie, movie.released as release_date, COLLECT(actor.name) as actors

# 3. Encontre pares de nós com mais do que uma relação entre si.
MATCH(n)-[r]-(m)
    WITH n,m, count(r) as nmr
    WHERE nmr > 1
    RETURN n,nmr,m

# 4. Encontre todos os pares de pessoas que fizeram revisões do mesmo filme. Apresente os seus nomes e título de cada filme.
MATCH (actor1:Person)-[:REVIEWED]->(movie:Movie)<-[:REVIEWED]-(actor2:Person)
    WHERE actor1.name < actor2.name
    RETURN movie.title as movie_title, actor1.name as actor1_name, actor2.name as actor2_name

# 5. Encontre todos os pares de atores que atuaram em vários filmes juntos.
MATCH (actor1:Person)-[:ACTED_IN]->(movie:Movie)<-[:ACTED_IN]-(actor2:Person)
    WITH actor1, actor2, count(movie.title) as movies
    WHERE actor1.name < actor2.name AND movies > 1
    RETURN movies as movie_count, actor1.name as actor1_name, actor2.name as actor2_name

# 6. Determine a idade média do elenco do filme "Apollo 13" no ano do lançamento do filme.
MATCH(actor:Person)-[:ACTED_IN]->(movie:Movie{title:"Apollo 13"})
    WITH movie.released - actor.born as age
    RETURN avg(age) as avg_age

# 7. Encontre os 10 filmes com o elenco mais velho no momento do lançamento do filme. Apresente o filme e a idade média arredondada a 2 casas decimais, por ordem decrescente.
MATCH(actor:Person)-[:ACTED_IN]->(movie:Movie)
    WITH movie, round(avg(movie.released - actor.born),2) as avg_age
    RETURN movie.title as movie_title, avg_age
    ORDER BY avg_age DESC
    LIMIT 10

# 8. Apresente o subgrafo ACTED_IN do filme com o elenco mais novo, no momento do lançamento do filme.
MATCH(actor:Person)-[:ACTED_IN]->(movie:Movie)
    WITH COLLECT(actor.name) AS actors_names, movie, round(avg(movie.released - actor.born),2) as avg_age
    RETURN movie.title as movie_title, actors_names
    ORDER BY avg_age ASC
    LIMIT 1

# 9. Qual é o caminho mais curto (usando qualquer tipo de relação) entre John Cusack e Demi Moore?
MATCH p=shortestPath((first_node:Person{name:"John Cusack"})-[*]-(last_node:Person{name:"Demi Moore"}))
    RETURN p

# 10. Qual a dimensão caminho mais curto (usando qualquer tipo de relação) entre Keanu Reeves e Tom Cruise?
MATCH p=shortestPath((first_node:Person{name:"Keanu Reeves"})-[*]-(last_node:Person{name:"Tom Cruise"}))
    WITH length(p) as shortest_path_dimension
    RETURN shortest_path_dimension

# 11. Quais são as dimensões do caminho mais curto entre pessoas com nome Jim e pessoas com nome Kevin?
MATCH p=shortestPath((first_node:Person)-[*]-(last_node:Person))
    WHERE first_node.name STARTS WITH "Jim" AND last_node.name STARTS WITH "Kevin"
    WITH first_node, last_node, length(p) as shortest_path_dimension
    RETURN first_node.name, last_node.name, shortest_path_dimension
    ORDER BY shortest_path_dimension ASC
    LIMIT 1

# 12. Que pessoas têm uma distância 2 para Jim Cash (a distância entre duas pessoas é o comprimento do caminho mais curto entre eles)?
MATCH p=shortestPath((first_node:Person)-[*]-(last_node:Person{name:"Jim Cash"}))
    WHERE first_node <> last_node
    WITH first_node, last_node, length(p) as shortest_path_dimension
    WHERE shortest_path_dimension = 2
    RETURN first_node.name, last_node.name, shortest_path_dimension


# 13. Qual é a maior distância de uma pessoa para Kevin Bacon?
MATCH p=shortestPath((first_node:Person)-[*]-(last_node:Person{name:"Kevin Bacon"}))
    WHERE first_node <> last_node
    WITH first_node, last_node, length(p) as shortest_path_dimension
    RETURN first_node.name, last_node.name, shortest_path_dimension
    ORDER BY shortest_path_dimension DESC
    LIMIT 1

# 14. Qual é a maior distância entre duas pessoas?
MATCH p=shortestPath((first_node:Person)-[*]-(last_node:Person))
    WHERE first_node <> last_node
    WITH first_node, last_node, length(p) as shortest_path_dimension
    RETURN first_node.name, last_node.name, shortest_path_dimension
    ORDER BY shortest_path_dimension DESC
    LIMIT 1

# 15. Qual é a distribuição de distâncias em pares (isto é, para a distância 1, 2, 3, ..., quantos pares de pessoas têm essa distância um do outro)?
MATCH p=shortestPath((first_node:Person)-[*]-(last_node:Person))
    WHERE first_node <> last_node
    WITH length(p) as shortest_path_dimension, count(*) as pairs
    RETURN shortest_path_dimension, pairs
    ORDER BY shortest_path_dimension

# 16. Indique as 10 pessoas com menor distância média em que o caminho entre elas são relações do tipo ACTED_IN.
MATCH p=shortestPath((first_node:Person)-[:ACTED_IN*]-(last_node:Person))
    WHERE first_node <> last_node
    WITH first_node, last_node, avg(length(p)) as shortest_path_dimension_avg
    RETURN first_node.name, last_node.name, shortest_path_dimension_avg
    ORDER BY shortest_path_dimension_avg ASC
    LIMIT 10

# 17. Apresente os atores que tiveram pelo menos uma role para personagens com o prefixo 'Dr.'. O resultado deve ser uma lista com o par “Ator, Lista das roles”.
MATCH (actor:Person)-[r:ACTED_IN]->(movie:Movie)
    UNWIND r.roles as roles
    WITH actor, roles
    WHERE roles STARTS WITH 'Dr.'
    WITH actor, COLLECT(DISTINCT roles) AS roles_
    RETURN actor.name AS actor, roles_ AS roles_list

# 18. Apresente os diretores dos 10 filmes com rating mais elevado e o nome dos reviewers, bem como o nome dos filmes
MATCH (person:Person)-[:DIRECTED]->(movie:Movie)<-[r:REVIEWED]-(person2:Person)
    WITH COLLECT(person.name) as directors, person2, movie, r.rating as rating
    RETURN directors, movie.title as movie, rating, person2.name as reviewer
    ORDER BY rating DESC
    LIMIT 10

# 19. Apresente o nome de pessoas que tenham dirigido e produzido um filme que também escreveram
MATCH (person:Person)-[:WROTE]->(movie:Movie)<-[:DIRECTED]-(person2:Person)-[:PRODUCED]->(movie2:Movie)
    WHERE movie.title=movie2.title AND person.name=person2.name
    RETURN movie.title as movie_title, person.name as movie_director_producer_writter

# 20. Atores com mais que um role no mesmo filme
MATCH (actor:Person)-[r:ACTED_IN]->(movie:Movie)
    UNWIND r.roles as roles
    WITH actor, movie,r, COUNT(roles) as count
    WHERE count > 1
    RETURN actor.name,  movie.title, r.roles